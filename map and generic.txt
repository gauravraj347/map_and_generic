
1. A Map in Java is an interface that represents a mapping between keys and values. A Map can store any type of objects as keys and values, as long as the keys are unique and not 
null. A Map allows you to perform operations such as searching, updating, or deleting elements based on the keys.

2. Some of the commonly used implementations of Map in Java are HashMap, TreeMap, and LinkedHashMap. HashMap is a hash-based implementation that offers fast lookup and insertion, 
but does not maintain any order of the keys. TreeMap is a tree-based implementation that offers sorted keys and supports the SortedMap interface. LinkedHashMap is a linked-list 
based implementation that preserves the insertion order of the keys.

3. The main difference between HashMap and TreeMap is that HashMap uses a hash function to map keys to values, while TreeMap uses a red-black tree to store key-value pairs. 
HashMap is faster than TreeMap, but does not guarantee any order of the keys. TreeMap is slower than HashMap, but maintains the natural order of the keys or a custom order 
specified by a Comparator.

4. To check if a key exists in a Map in Java, you can use the containsKey method. This method returns true if the Map contains a mapping for the specified key, and false otherwise. 

5. Generics in Java are a feature that allows you to create classes, interfaces, and methods that can work with different types of objects, without casting or type checking. 
Generics enable you to write type-safe and reusable code that can adapt to different types of data. Generics use type parameters, which are placeholders for the actual types that 
are specified when creating an instance of a generic class or invoking a generic method.

6. Some of the benefits of using generics in Java are:

    - Type safety: Generics ensure that only objects of the specified type are stored in a generic collection or passed to a generic method. This prevents runtime errors such as 
	ClassCastException or NullPointerException.
    - Code reuse: Generics allow you to write a single class or method that can work with multiple types of data, without duplicating code or creating multiple versions for each type.
    - Compile-time checking: Generics enable the compiler to detect and report errors at compile time, rather than at runtime. This improves the reliability and quality of the code.
    - Performance: Generics eliminate the need for casting and boxing/unboxing, which can improve the performance of the code. Generics also allow the compiler to optimize the code 
	for the specific types used.
    - Readability: Generics make the code more readable and understandable, by making the types of the objects clear and explicit.

7. A generic class in Java is a class that has one or more type parameters that act as placeholders for the actual types that are used when creating an instance of the class. 

A generic class can be used to create objects of different types, as long as they match the type parameters.

8. A type parameter in Java generics is an identifier that specifies a generic type name. A type parameter can be any reference type, such as a class, an interface, an array, or 
another type parameter. A type parameter is declared within angle brackets (<>) after the name of a generic class, interface, or method.

9. A generic method in Java is a method that can accept and return values of different types, depending on the type parameters specified when the method is invoked. Generic 
methods allow us to write code that is more reusable, type-safe, and easier to read.

10. ArrayList and ArrayList<T> are both classes that implement the List interface in Java, which represents an ordered collection of elements. However, ArrayList is the raw 
type of the class, which means it does not specify the type of the elements it contains. ArrayList<T> is the generic type of the class, which means it specifies the type of the 
elements it contains using a type parameter <T>


